name: Test

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

permissions:
  contents: read
  checks: write

jobs:

  test:
    strategy:
      fail-fast: false
      matrix:
        job:
          - arch: aarch64
            container: quay.io/pypa/manylinux_2_28_aarch64
          - arch: arm
            container: alpine
          - arch: null
            container: debian
          - arch: arm64
            container: docker.io/sandervocke/shoopdaloop_run_base_ubuntu_latest_arm64:latest
        args:
          [ null, '--privileged' ]

    runs-on: ubuntu-latest
    env:
      TEST_GH_ENV: hello
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        submodules: recursive
    - name: Start container
      uses: ./
      with:
        container: ${{ matrix.job.container }}
        arch: ${{ matrix.job.arch }}
        podman_args: ${{ matrix.args }}
        verbose: true
    - name: Inspect container
      if: success() || failure()
      shell: bash
      run: podman inspect $__RUNNING_CONTAINER
    - name: Print arch from within container
      shell: run-in-container.sh {0}
      run: |
        echo "Arch in container: $(uname -m)"
    - name: Print arch from within container with explicit shell
      if: success() || failure()
      shell: run-in-container.sh --shell sh {0}
      run: |
        echo "Arch in container: $(uname -m)"
    - name: Set output and env from outside container
      if: success() || failure()
      shell: bash
      id: set_outside
      run: |
        echo "value=I AM OUTSIDE  " >> $GITHUB_OUTPUT
        echo "OUTSIDE_VAR=ENV OUTSIDE  " >> $GITHUB_ENV
    - name: Set output and env from inside container
      if: success() || failure()
      shell: run-in-container.sh {0}
      id: set_inside
      run: |
        echo "GITHUB_OUTPUT: $GITHUB_OUTPUT. GITHUB_ENV: $GITHUB_ENV"
        echo "value=I AM INSIDE  " >> $GITHUB_OUTPUT
        echo "INSIDE_VAR=ENV INSIDE  " >> $GITHUB_ENV
    - name: Check output and env from outside container
      if: success() || failure()
      shell: bash
      env:
        LOCAL_OUTSIDE_ENV: "LOCAL OUTSIDE  "
      run: |
        RVAL=0
        echo "OUTSIDE_VAR: $OUTSIDE_VAR"; [[ "${OUTSIDE_VAR}" != "ENV OUTSIDE  " ]] && echo "Error: OUTSIDE_VAR check failed: $OUTSIDE_VAR" && RVAL=1
        echo "INSIDE_VAR: $INSIDE_VAR"; [[ "${INSIDE_VAR}" != "ENV INSIDE  " ]] && echo "Error: INSIDE_VAR check failed: $INSIDE_VAR" && RVAL=1
        echo "LOCAL_OUTSIDE_ENV: $LOCAL_OUTSIDE_ENV"; [[ "${LOCAL_OUTSIDE_ENV}" != "LOCAL OUTSIDE  " ]] && echo "Error: LOCAL_OUTSIDE_ENV check failed: $LOCAL_OUTSIDE_ENV" && RVAL=1
        echo "outside output: ${{ steps.set_outside.outputs.value }}"; [[ "${{ steps.set_outside.outputs.value }}" != "I AM OUTSIDE  " ]] && echo "Error: outside output check failed: ${{ steps.set_outside.outputs.value }}" && RVAL=1
        echo "inside output: ${{ steps.set_inside.outputs.value }}"; [[ "${{ steps.set_inside.outputs.value }}" != "I AM INSIDE  " ]] && echo "Error: inside output check failed: ${{ steps.set_inside.outputs.value }}" && RVAL=1
        echo "github env: ${{ env.TEST_GH_ENV }}";  [[ "${{ env.TEST_GH_ENV }}" != "hello" ]] && echo "Error: github env var check failed: ${{ env.TEST_GH_ENV }}" && RVAL=1
        exit $RVAL
    - name: Check output and env from inside container
      if: success() || failure()
      shell: run-in-container.sh {0}
      run: |
        RVAL=0
        echo "outside output: ${{ steps.set_outside.outputs.value }}"; [[ "${{ steps.set_outside.outputs.value }}" != "I AM OUTSIDE  " ]] && echo "Error: outside output check failed: ${{ steps.set_outside.outputs.value }}" && RVAL=1
        echo "inside output: ${{ steps.set_inside.outputs.value }}"; [[ "${{ steps.set_inside.outputs.value }}" != "I AM INSIDE  " ]] && echo "Error: inside output check failed: ${{ steps.set_inside.outputs.value }}" && RVAL=1
        echo "github env: ${{ env.TEST_GH_ENV }}";  [[ "${{ env.TEST_GH_ENV }}" != "hello" ]] && echo "Error: github env var check failed: ${{ env.TEST_GH_ENV }}" && RVAL=1
        exit $RVAL
    - name: Create a file from outside container
      if: success() || failure()
      shell: bash
      run: echo "HELLO OUTSIDE" > file_created_outside
    - name: Create a file from inside container
      if: success() || failure()
      shell: run-in-container.sh {0}
      run: |
         set -o xtrace
         echo "Current directory: $(pwd)"
         ls -d -a -l $(pwd)
         ls -l -a /tmp/_gha*
         echo "HELLO INSIDE" > file_created_inside
    - name: Check files outside container
      if: success() || failure()
      shell: bash
      run: |
        RVAL=0
        echo "file outside contents: $(cat file_created_outside)"; [[ "$(cat file_created_outside)" != "HELLO OUTSIDE" ]] && echo "Error: outside file check failed: $(cat file_created_outside)" && RVAL=1
        echo "file inside contents: $(cat file_created_inside)"; [[ "$(cat file_created_inside)" != "HELLO INSIDE" ]] && echo "Error: inside file check failed: $(cat file_created_inside)" && RVAL=1
        exit $RVAL
    - name: Check files inside container
      if: success() || failure()
      shell: run-in-container.sh {0}
      run: |
        RVAL=0
        echo "file outside contents: $(cat file_created_outside)"; [[ "$(cat file_created_outside)" != "HELLO OUTSIDE" ]] && echo "Error: outside file check failed: $(cat file_created_outside)" && RVAL=1
        echo "file inside contents: $(cat file_created_inside)"; [[ "$(cat file_created_inside)" != "HELLO INSIDE" ]] && echo "Error: inside file check failed: $(cat file_created_inside)" && RVAL=1
        exit $RVAL
    - name: Check failure propagation from container
      if: success() || failure()
      shell: run-in-container.sh {0}
      run: exit 1
      continue-on-error: true # will pass the job regardless of result
      id: check_propagate_failure
    - name: Check failure propagation from container, part 2 (if not OK)
      shell: bash
      if: ${{ steps.check_propagate_failure.outcome != 'failure' }}
      run: |
        echo "Container step should have failed, but status is not failure"
        exit 1

